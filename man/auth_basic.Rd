% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auth_basic.R
\name{auth_basic}
\alias{auth_basic}
\title{Basic authentication plugin}
\usage{
auth_basic(authenticator, name = "BasicAuth", realm = "private")
}
\arguments{
\item{authenticator}{A function that takes a username, password, realm,
request, and response and returns \code{TRUE} if the pair is valid, and \code{FALSE}
otherwise. If the function sets a character vector of scopes for the user in
the \code{auth_scope} field of the response data
(\code{response$set_data("auth_scope", ...)}) then it will be tested against the
scopes needed for the specific endpoint}

\item{name}{The name of the authentication}

\item{realm}{The realm this authentication corresponds to. Will be returned
to the client on a failed authentication attempt to inform them of the
credentials required, though most often these days it is kept from the user.}
}
\value{
An \link{AuthBasic} R6 object
}
\description{
Basic authentication is a HTTP scheme that sends username and password as a
\code{:} separated, base64 encoded string in the authorization header. Because it
is effectively send in plain text (base64 encoding can easily be decoded)
this should only ever be used along with other security measures such as
https/ssl to avoid username and passwords being snooped from the request.
}
\details{
This authenticator will use a user provided function to test a
username/password pair. It is up to the user to handle the storage and
testing of the passwords in a sensible and responsible way. See
\code{\link[sodium:password]{sodium::password_store()}} for a good first step towards responsible design.

If the authentication passes, the username from the authorization header is
written to the \code{username} data slot in the request
}
