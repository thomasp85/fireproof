% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auth_basic.R
\name{auth_basic}
\alias{auth_basic}
\title{Basic authentication plugin}
\usage{
auth_basic(
  authenticator,
  user_info = NULL,
  realm = "private",
  name = "BasicAuth"
)
}
\arguments{
\item{authenticator}{A function that will be called with the arguments
\code{username}, \code{password}, \code{realm}, \code{request}, and \code{response} and returns \code{TRUE}
if the user is valid, and \code{FALSE} otherwise. If the function returns a
character vector it is considered to be authenticated and the return value
will be understood as scopes the user is granted.}

\item{user_info}{A function to extract user information from the
username. It is called with two arguments: \code{user} and \code{setter},
the first being the username used for the successful authentication, the
second being a function that must be called in the end with the relevant
information. The \code{setter} function takes the following arguments:
\code{display_name} (the name the user has chosen as public name), \code{name_given}
(the users real given name), \code{name_middle} (the users middle name),
\code{name_family} (the users family name), \code{emails} (a vector of emails,
potentially named with type, e.g. "work", "home" etc), \code{photos} (a vector of
urls for profile photos), and \code{...} with additional named fields to add.}

\item{realm}{The realm this authentication corresponds to. Will be returned
to the client on a failed authentication attempt to inform them of the
credentials required, though most often these days it is kept from the user.}

\item{name}{The name of the authentication}
}
\value{
An \link{AuthBasic} R6 object
}
\description{
Basic authentication is a HTTP scheme that sends username and password as a
\code{:} separated, base64 encoded string in the authorization header. Because it
is effectively send in plain text (base64 encoding can easily be decoded)
this should only ever be used along with other security measures such as
https/ssl to avoid username and passwords being snooped from the request.
}
\details{
This authenticator will use a user provided function to test a
username/password pair. It is up to the user to handle the storage and
testing of the passwords in a sensible and responsible way. See
\code{\link[sodium:password]{sodium::password_store()}} for a good first step towards responsible design.

If the authentication passes, the username from the authorization header is
written to the \code{username} data slot in the request
}
\examples{
# Create an authenticator of dubious quality
basic <- auth_basic(
  authenticator = function(user)
)

}
