% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auth_oauth2.R
\name{AuthOAuth2}
\alias{AuthOAuth2}
\title{R6 class for the OAuth 2.0 authentication scheme}
\description{
This class encapsulates the logic of the oauth 2.0 based authentication
scheme. See \code{\link[=auth_oauth2]{auth_oauth2()}} for more information
}
\examples{
# Example using GitHub endpoints (use `auth_github()` in real code)
github <- AuthOAuth2$new(
  token_url = "https://github.com/login/oauth/access_token",
  redirect_url = "https://example.com/auth",
  client_id = "MY_APP_ID",
  client_secret = "SUCHASECRET",
  auth_url = "https://github.com/login/oauth/authorize",
  grant_type = "authorization_code"
)

}
\section{Super class}{
\code{\link[fireproof:Auth]{fireproof::Auth}} -> \code{AuthOAuth2}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{location}}{The location of the secret in the request, either
\code{"cookie"} or \code{"header"}}

\item{\code{open_api}}{An OpenID compliant security scheme description}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-AuthOAuth2-new}{\code{AuthOAuth2$new()}}
\item \href{#method-AuthOAuth2-check_request}{\code{AuthOAuth2$check_request()}}
\item \href{#method-AuthOAuth2-reject_response}{\code{AuthOAuth2$reject_response()}}
\item \href{#method-AuthOAuth2-register_handler}{\code{AuthOAuth2$register_handler()}}
\item \href{#method-AuthOAuth2-clone}{\code{AuthOAuth2$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="fireproof" data-topic="Auth" data-id="forbid_user"><a href='../../fireproof/html/Auth.html#method-Auth-forbid_user'><code>fireproof::Auth$forbid_user()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthOAuth2-new"></a>}}
\if{latex}{\out{\hypertarget{method-AuthOAuth2-new}{}}}
\subsection{Method \code{new()}}{
Constructor for the class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthOAuth2$new(
  token_url,
  redirect_url,
  client_id,
  client_secret,
  auth_url = NULL,
  grant_type = c("authorization_code", "password"),
  scopes = NULL,
  validate = function(info) TRUE,
  redirect_path = sub("^.*?(?=(?<!:/?)/)", "", redirect_url, perl = TRUE),
  on_auth = replay_request,
  user_info = NULL,
  service_params = list(),
  name = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{token_url}}{The URL to the authorization servers token endpoint}

\item{\code{redirect_url}}{The URL the authorization server should redirect to
following a successful authorization. Must be equivalent to one provided
when registering your application}

\item{\code{client_id}}{The ID issued by the authorization server when
registering your application}

\item{\code{client_secret}}{The secret issued by the authorization server when
registering your application. Do NOT store this in plain text}

\item{\code{auth_url}}{The URL to redirect the user to when requesting
authorization (only needed for \code{grant_type = "authorization_code"})}

\item{\code{grant_type}}{The type of authorization scheme to use, either
\code{"authorization_code"} or \code{"password"}}

\item{\code{scopes}}{Optional character vector of scopes to request the user to
grant you during authorization}

\item{\code{validate}}{Function to validate the user once logged in. It will be
called with a single argument \code{info}, which gets the information of the user
as provided by the \code{user_info} function in the. By default it returns \code{TRUE}
on everything meaning that anyone who can log in with the provider will
be accepted, but you can provide a different function to e.g. restrict
access to certain user names etc.}

\item{\code{redirect_path}}{The path that should capture redirects after
successful authorization. By default this is derived from \code{redirect_url}
by removing the domain part of the url, but if for some reason this
doesn't yields the correct result for your server setup you can overwrite
it here.}

\item{\code{on_auth}}{A function which will handle the result of a successful
authorization. It will be called with four arguments: \code{request}, \code{response},
\code{session_state}, and \code{server}. The first contains the current request
being responded to, the second is the response being send back, the third
is a list recording the state of the original request which initiated the
authorization (containing \code{method}, \code{url}, \code{headers}, and \code{body} fields
with information from the original request). By default it will use
\link{replay_request} to internally replay the original request and send back
the response.}

\item{\code{user_info}}{A function to extract user information from the
authorization provider. It will be called with two arguments: \code{token_info}
and \code{setter}, the first being the token information returned from the
provider as a list (notably with a \code{token} field for the actual token), the
second being a function that must be called in the end with the relevant
information. The \code{setter} function takes the following arguments:
\code{provider} (the name of the oauth2 provider), \code{id} (the identifier of the
user), \code{display_name} (the name the user has chosen as public name),
\code{name_given} (the users real given name), \code{name_middle} (the users middle
name), \code{name_family} (the users family name), \code{emails} (a vector of
emails, potentially named with type, e.g. "work", "home" etc), \code{photos}
(a vector of urls for profile photos), and \code{...} with additional named
fields to add}

\item{\code{service_params}}{A named list of additional query params to add to
the url when constructing the authorization url in the
\code{"authorization_code"} grant type}

\item{\code{name}}{The name of the scheme instance. This will also be the name
under which token info and user info is saved in the session store}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthOAuth2-check_request"></a>}}
\if{latex}{\out{\hypertarget{method-AuthOAuth2-check_request}{}}}
\subsection{Method \code{check_request()}}{
A function that validates an incoming request, returning
\code{TRUE} if it is valid and \code{FALSE} if not. It extracts the secret from
either the cookie or header based on the provided \code{key} and test it
against the provided \code{secret}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthOAuth2$check_request(request, response, keys, ..., .session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{request}}{The request to validate as a \link[reqres:Request]{Request}
object}

\item{\code{response}}{The corresponding response to the request as a
\link[reqres:Response]{Response} object}

\item{\code{keys}}{A named list of path parameters from the path matching}

\item{\code{...}}{Ignored}

\item{\code{.session}}{The session storage for the current session}

\item{\code{server}}{The fiery server handling the request}

\item{\code{arg_list}}{A list of additional arguments extracted be the
\code{before_request} handlers (will be used to access the session data store)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthOAuth2-reject_response"></a>}}
\if{latex}{\out{\hypertarget{method-AuthOAuth2-reject_response}{}}}
\subsection{Method \code{reject_response()}}{
Upon rejection this scheme sets the response status to \code{400}
if it has not already been set by others. In contrast to the other
schemes that are proper HTTP schemes, this one doesn't set a
\code{WWW-Authenticate} header.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthOAuth2$reject_response(response, scope, ..., .session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{response}}{The response object}

\item{\code{scope}}{The scope of the endpoint}

\item{\code{...}}{Ignored}

\item{\code{.session}}{The session storage for the current session}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthOAuth2-register_handler"></a>}}
\if{latex}{\out{\hypertarget{method-AuthOAuth2-register_handler}{}}}
\subsection{Method \code{register_handler()}}{
Hook for registering endpoint handlers needed for this
authentication method
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthOAuth2$register_handler(add_handler)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{add_handler}}{The \code{add_handler} method from \link{Fireproof} to be called
for adding additional handlers}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthOAuth2-clone"></a>}}
\if{latex}{\out{\hypertarget{method-AuthOAuth2-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthOAuth2$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
