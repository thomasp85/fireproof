% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auth_key.R
\name{auth_key}
\alias{auth_key}
\title{Authentication based on shared secret}
\usage{
auth_key(
  key,
  secret,
  get = NULL,
  head = NULL,
  post = NULL,
  put = NULL,
  delete = NULL,
  connect = NULL,
  options = NULL,
  trace = NULL,
  patch = NULL,
  all = NULL,
  cookie = TRUE,
  name = "KeyAuth",
  ignore_trailing_slash = FALSE
)
}
\arguments{
\item{key}{The name of the header or cookie to store the secret under}

\item{secret}{The secret to check for. Make sure never to store this in plain
text and check avoid checking it into version control.}

\item{get, head, post, put, delete, connect, options, trace, patch, all}{Character
vectors with paths to add authentication to up front. Additional paths can be
added afterwards using the \code{add_handler()} method.}

\item{cookie}{Boolean. Should the secret be transmitted as a cookie. If
\code{FALSE} it is expected to be transmitted as a header.}

\item{name}{The name of the plugin}

\item{ignore_trailing_slash}{Logical. Should the trailing slash of a path
be ignored when determining if a request should be authenticated. Setting
this will not change the request or the path associated with it but just ensure that
both \code{path/to/resource} and \verb{path/to/resource/} ends up being authenticated}
}
\value{
A \code{AuthBasicRoute} object
}
\description{
This authentication scheme is based on a mutually shared secret between the
server and the client. The client provides this secret either as a header or
in a cookie, and the server verifies the authenticity of the secret. Like
with \link[=auth_basic]{basic authentication}, this scheme relies on additional
technology like HTTPS/SSL to make it secure since the secret can otherwise
easily be extracted from the request by man-in-the-middle attack.
}
