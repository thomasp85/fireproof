% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auth_google.R
\name{auth_google}
\alias{auth_google}
\title{Authenticate with Google using OpenID Connect}
\usage{
auth_google(
  redirect_url,
  client_id,
  client_secret,
  scopes = "profile",
  service_params = list(access_type = "offline", include_granted_scopes = "true"),
  ...,
  name = "google"
)
}
\arguments{
\item{redirect_url}{The URL the authorization server should redirect to
following a successful authorization. Must be equivalent to one provided
when registering your application}

\item{client_id}{The ID issued by the authorization server when
registering your application}

\item{client_secret}{The secret issued by the authorization server when
registering your application. Do NOT store this in plain text}

\item{scopes}{Optional character vector of scopes to request the user to
grant you during authorization}

\item{service_params}{A named list of additional query params to add to
the url when constructing the authorization url in the
\code{"authorization_code"} grant type}

\item{...}{
  Arguments passed on to \code{\link[=auth_oidc]{auth_oidc}}
  \describe{
    \item{\code{request_user_info}}{Logical. Should the userinfo endpoint be followed to
add information about the user not present in the JWT token. Setting this to
\code{TRUE} will add an additional API call to your authentication flow but
potentially provide richer information about the user.}
    \item{\code{validate}}{Function to validate the user once logged in. It will be
called with a single argument \code{info}, which gets the information of the user
as provided by the \code{user_info} function in the. By default it returns \code{TRUE}
on everything meaning that anyone who can log in with the provider will
be accepted, but you can provide a different function to e.g. restrict
access to certain user names etc.}
    \item{\code{redirect_path}}{The path that should capture redirects after
successful authorization. By default this is derived from \code{redirect_url}
by removing the domain part of the url, but if for some reason this
doesn't yields the correct result for your server setup you can overwrite
it here.}
    \item{\code{on_auth}}{A function which will handle the result of a successful
authorization. It will be called with four arguments: \code{request}, \code{response},
\code{session_state}, and \code{server}. The first contains the current request
being responded to, the second is the response being send back, the third
is a list recording the state of the original request which initiated the
authorization (containing \code{method}, \code{url}, \code{headers}, and \code{body} fields
with information from the original request). By default it will use
\link{replay_request} to internally replay the original request and send back
the response.}
  }}

\item{name}{The name of the scheme instance. This will also be the name
under which token info and user info is saved in the session store}
}
\value{
An \link{AuthOIDC} object
}
\description{
This authentication requests you to log in with google and authenticates you
through their service. Your server must be registered and have a valid client
ID and client secret for this to work. Read more about registering an
application at \url{https://developers.google.com/identity/protocols/oauth2}. If
you want to limit access to only select users you should make sure to provide
a \code{validation} function that checks the userinfo against a whitelist.
}
\section{User information}{
\code{auth_google()} automatically adds user information according to the
description in \code{\link[=auth_oidc]{auth_oidc()}}. It sets the \code{provider} field to \code{"google"}.
}

\examples{
google <- auth_google(
  redirect_url = "https://example.com/auth",
  client_id = "MY_APP_ID",
  client_secret = "SUCHASECRET"
)

# Add it to a fireproof plugin
fp <- Fireproof$new()
fp$add_auth(google, "google_auth")

# Use it in an endpoint
fp$add_auth_handler("get", "/*", google_auth)

}
