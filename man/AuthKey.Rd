% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auth_key.R
\name{AuthKey}
\alias{AuthKey}
\title{R6 class for the Key authentication scheme}
\description{
This class encapsulates the logic of the key based authentication scheme. See
\code{\link[=auth_key]{auth_key()}} for more information
}
\section{Super class}{
\code{\link[fireproof:Auth]{fireproof::Auth}} -> \code{AuthKey}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{location}}{The location of the secret in the request, either
\code{"cookie"} or \code{"header"}}

\item{\code{open_api}}{An OpenID compliant security scheme description}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-AuthKey-new}{\code{AuthKey$new()}}
\item \href{#method-AuthKey-check_request}{\code{AuthKey$check_request()}}
\item \href{#method-AuthKey-reject_response}{\code{AuthKey$reject_response()}}
\item \href{#method-AuthKey-clone}{\code{AuthKey$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="fireproof" data-topic="Auth" data-id="forbid_user"><a href='../../fireproof/html/Auth.html#method-Auth-forbid_user'><code>fireproof::Auth$forbid_user()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-new"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-new}{}}}
\subsection{Method \code{new()}}{
Constructor for the class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$new(key, secret, cookie = TRUE, name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{The name of the header or cookie to store the secret under}

\item{\code{secret}}{The secret to check for. Either a single string with the secret
or a function that takes the key, the request and the response and returns
\code{TRUE} if its a valid secret (useful if you have multiple or rotating
secrets). If a function, the function can also set the scope of the key in
the \code{auth_scope} field of the response data
(\code{response$set_data("auth_scope", ...)}) then it will be tested against the
scopes needed for the specific endpoint. Make sure never to store secrets in
plain text and avoid checking them into version control.}

\item{\code{cookie}}{Boolean. Should the secret be transmitted as a cookie. If
\code{FALSE} it is expected to be transmitted as a header.}

\item{\code{name}}{The name of the scheme instance}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-check_request"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-check_request}{}}}
\subsection{Method \code{check_request()}}{
A function that validates an incoming request, returning
\code{TRUE} if it is valid and \code{FALSE} if not. It extracts the secret from
either the cookie or header based on the provided \code{key} and test it
against the provided \code{secret}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$check_request(request, response, keys, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{request}}{The request to validate as a \link[reqres:Request]{Request}
object}

\item{\code{response}}{The corresponding response to the request as a
\link[reqres:Response]{Response} object}

\item{\code{keys}}{A named list of path parameters from the path matching}

\item{\code{...}}{Ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-reject_response"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-reject_response}{}}}
\subsection{Method \code{reject_response()}}{
Upon rejection this scheme sets the response status to \code{400}
if it has not already been set by others. In contrast to the other
schemes that are proper HTTP schemes, this one doesn't set a
\code{WWW-Authenticate} header.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$reject_response(response, scope)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{response}}{The response object}

\item{\code{scope}}{The scope of the endpoint}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-clone"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
