% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auth_basic.R
\name{AuthBasic}
\alias{AuthBasic}
\title{R6 class for the Basic authentication scheme}
\description{
This class encapsulates the logic of the
\href{https://datatracker.ietf.org/doc/html/rfc7617}{Basic authentication scheme}.
See \code{\link[=auth_basic]{auth_basic()}} for more information.
}
\examples{
# Create an authenticator of dubious quality
basic <- AuthBasic$new(
  authenticator = function(user, password) {
    user == "thomas" && password == "pedersen"
  },
  user_info = function(user, setter) {
    setter(
      name_given = "Thomas",
      name_middle = "Lin",
      name_family = "Pedersen"
    )
  }
)

}
\section{Super class}{
\code{\link[fireproof:Auth]{fireproof::Auth}} -> \code{AuthBasic}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{open_api}}{An OpenID compliant security scheme description}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-AuthBasic-new}{\code{AuthBasic$new()}}
\item \href{#method-AuthBasic-check_request}{\code{AuthBasic$check_request()}}
\item \href{#method-AuthBasic-reject_response}{\code{AuthBasic$reject_response()}}
\item \href{#method-AuthBasic-clone}{\code{AuthBasic$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="fireproof" data-topic="Auth" data-id="forbid_user"><a href='../../fireproof/html/Auth.html#method-Auth-forbid_user'><code>fireproof::Auth$forbid_user()</code></a></span></li>
<li><span class="pkg-link" data-pkg="fireproof" data-topic="Auth" data-id="register_handler"><a href='../../fireproof/html/Auth.html#method-Auth-register_handler'><code>fireproof::Auth$register_handler()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthBasic-new"></a>}}
\if{latex}{\out{\hypertarget{method-AuthBasic-new}{}}}
\subsection{Method \code{new()}}{
Constructor for the class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthBasic$new(authenticator, user_info = NULL, realm = "private", name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{authenticator}}{A function that will be called with the arguments
\code{username}, \code{password}, \code{realm}, \code{request}, and \code{response} and returns \code{TRUE}
if the user is valid, and \code{FALSE} otherwise. If the function returns a
character vector it is considered to be authenticated and the return value
will be understood as scopes the user is granted.}

\item{\code{user_info}}{A function to extract user information from the
username. It is called with two arguments: \code{user} and \code{setter},
the first being the username used for the successful authentication, the
second being a function that must be called in the end with the relevant
information. The \code{setter} function takes the following arguments:
\code{display_name} (the name the user has chosen as public name),
\code{name_given} (the users real given name), \code{name_middle} (the users middle
name), \code{name_family} (the users family name), \code{emails} (a vector of
emails, potentially named with type, e.g. "work", "home" etc), \code{photos}
(a vector of urls for profile photos), and \code{...} with additional named
fields to add.}

\item{\code{realm}}{The realm this authentication corresponds to. Will be returned
to the client on a failed authentication attempt to inform them of the
credentials required, though most often these days it is kept from the user.}

\item{\code{name}}{The name of the authentication}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthBasic-check_request"></a>}}
\if{latex}{\out{\hypertarget{method-AuthBasic-check_request}{}}}
\subsection{Method \code{check_request()}}{
A function that validates an incoming request, returning
\code{TRUE} if it is valid and \code{FALSE} if not. It decodes the credentials in
the \code{Authorization} header, splits it into username and password and then
calls the authenticator function provided at construction.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthBasic$check_request(request, response, keys, ..., .session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{request}}{The request to validate as a \link[reqres:Request]{Request}
object}

\item{\code{response}}{The corresponding response to the request as a
\link[reqres:Response]{Response} object}

\item{\code{keys}}{A named list of path parameters from the path matching}

\item{\code{...}}{Ignored}

\item{\code{.session}}{The session storage for the current session}

\item{\code{server}}{The fiery server handling the request}

\item{\code{arg_list}}{A list of additional arguments extracted be the
\code{before_request} handlers (will be used to access the session data store)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthBasic-reject_response"></a>}}
\if{latex}{\out{\hypertarget{method-AuthBasic-reject_response}{}}}
\subsection{Method \code{reject_response()}}{
Upon rejection this scheme sets the response status to \code{401}
and sets the \code{WWW-Authenticate} header to
\verb{Basic realm="<realm>", charset=UTF-8}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthBasic$reject_response(response, scope, ..., .session)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{response}}{The response object}

\item{\code{scope}}{The scope of the endpoint}

\item{\code{...}}{Ignored}

\item{\code{.session}}{The session storage for the current session}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthBasic-clone"></a>}}
\if{latex}{\out{\hypertarget{method-AuthBasic-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthBasic$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
