% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auth_beecoptor.R
\name{auth_beeceptor}
\alias{auth_beeceptor}
\alias{auth_beeceptor_github}
\alias{auth_beeceptor_google}
\title{Authenticate using the mock OAuth servers provided by Beeceptor}
\usage{
auth_beeceptor_github(
  redirect_url,
  client_id = "MOCK_CLIENT",
  ...,
  name = "beeceptor_github"
)

auth_beeceptor_google(
  redirect_url,
  client_id = "MOCK_CLIENT",
  ...,
  name = "beeceptor_google"
)
}
\arguments{
\item{redirect_url}{The URL the authorization server should redirect to
following a successful authorization. Must be equivalent to one provided
when registering your application}

\item{client_id}{The ID issued by the authorization server when
registering your application}

\item{...}{
  Arguments passed on to \code{\link[=auth_oauth2]{auth_oauth2}}
  \describe{
    \item{\code{token_url}}{The URL to the authorization servers token endpoint}
    \item{\code{client_secret}}{The secret issued by the authorization server when
registering your application. Do NOT store this in plain text}
    \item{\code{auth_url}}{The URL to redirect the user to when requesting
authorization (only needed for \code{grant_type = "authorization_code"})}
    \item{\code{grant_type}}{The type of authorization scheme to use, either
\code{"authorization_code"} or \code{"password"}}
    \item{\code{scopes}}{Optional character vector of scopes to request the user to
grant you during authorization}
    \item{\code{validate}}{Function to validate the user once logged in. It will be
called with a single argument \code{info}, which gets the information of the user
as provided by the \code{user_info} function in the. By default it returns \code{TRUE}
on everything meaning that anyone who can log in with the provider will
be accepted, but you can provide a different function to e.g. restrict
access to certain user names etc.}
    \item{\code{redirect_path}}{The path that should capture redirects after
successful authorization. By default this is derived from \code{redirect_url}
by removing the domain part of the url, but if for some reason this
doesn't yields the correct result for your server setup you can overwrite
it here.}
    \item{\code{on_auth}}{A function which will handle the result of a successful
authorization. It will be called with four arguments: \code{request}, \code{response},
\code{session_state}, and \code{server}. The first contains the current request
being responded to, the second is the response being send back, the third
is a list recording the state of the original request which initiated the
authorization (containing \code{method}, \code{url}, \code{headers}, and \code{body} fields
with information from the original request). By default it will use
\link{replay_request} to internally replay the original request and send back
the response.}
    \item{\code{user_info}}{A function to extract user information from the
username. It is called with two arguments: \code{token_info} and \code{setter},
the first being the token information returned from the provider as a list
(notably with a \code{token} field for the actual token), the second being a
function that must be called in the end with the relevant information (see
\code{\link[=user_info]{user_info()}}).}
    \item{\code{service_params}}{A named list of additional query params to add to
the url when constructing the authorization url in the
\code{"authorization_code"} grant type}
  }}

\item{name}{The name of the scheme instance. This will also be the name
under which token info and user info is saved in the session store}
}
\value{
An \link{AuthOAuth2} object
}
\description{
These two functions sets up mock OAuth 2.0 authentication based on tools
provided by
\href{https://app.beeceptor.com/mock-server/oauth-mock}{Beeceptor}. These should
obviously not be used for production because they allow anyone to be
authenticated, but they can be used while testing your authentication setup.
}
\examples{
beeceptor <- auth_beeceptor_github(
  redirect_url = "https://example.com/auth"
)

# Add it to a fireproof plugin
fp <- Fireproof$new()
fp$add_auth(beeceptor, "beeceptor_auth")

# Use it in an endpoint
fp$add_auth_handler("get", "/*", beeceptor_auth)

}
